{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\win10\\\\DEV\\\\cosmosapiens\\\\src\\\\components\\\\galaxy\\\\galaxy.js\",\n    _s = $RefreshSig$();\n\nimport React, { useMemo, useRef, useCallback } from \"react\";\nimport WormholeMap from '../../assets/textures/wormhole.jpg';\nimport CloudsMap from '../../assets/textures/cloud.png';\nimport { TextureLoader } from \"three\";\nimport { useLoader, useFrame } from \"@react-three/fiber\";\nimport { OrbitControls, Stars } from '@react-three/drei';\nimport * as THREE from \"three\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst parameters = {};\nparameters.count = 70000;\nparameters.size = 0.01;\nparameters.radius = 5;\nparameters.branches = 8;\nparameters.spin = 1;\nparameters.randomness = 0.3;\nparameters.randomnessPower = 5;\nparameters.stars = 9000;\nparameters.starColor = '#1b3984';\nparameters.insideColor = '#ff6030';\nparameters.outsideColor = '#1b3984';\nexport function Galaxy(props) {\n  _s();\n\n  const [positions, colors] = useMemo(() => {\n    let positions = [],\n        colors = [];\n\n    for (let i = 0; i < parameters.count; i++) {\n      //Position\n      const x = Math.random() * parameters.radius;\n      const branchAngle = i % parameters.branches / parameters.branches * 2 * Math.PI;\n      const spinAngle = x * parameters.spin;\n      const randomX = Math.pow(Math.random(), parameters.randomnessPower) * (Math.random() < 0.5 ? 1 : -1);\n      const randomY = Math.pow(Math.random(), parameters.randomnessPower) * (Math.random() < 0.5 ? 1 : -1);\n      const randomZ = Math.pow(Math.random(), parameters.randomnessPower) * (Math.random() < 0.5 ? 1 : -1);\n      positions[i * 3] = Math.sin(branchAngle + spinAngle) * x + randomX;\n      positions[i * 3 + 1] = randomY;\n      positions[i * 3 + 2] = Math.cos(branchAngle + spinAngle) * x + randomZ; //Color\n\n      const colorInside = new THREE.Color(parameters.insideColor);\n      const colorOutside = new THREE.Color(parameters.outsideColor);\n      const mixedColor = colorInside.clone();\n      mixedColor.lerp(colorOutside, x / parameters.radius);\n      colors[i * 3 + 0] = mixedColor.r;\n      colors[i * 3 + 1] = mixedColor.g;\n      colors[i * 3 + 2] = mixedColor.b;\n    }\n\n    return [new Float32Array(positions), new Float32Array(colors)];\n  }, [parameters.count]);\n  return /*#__PURE__*/_jsxDEV(\"points\", {\n    children: [/*#__PURE__*/_jsxDEV(\"bufferGeometry\", {\n      attach: \"geometry\",\n      children: [/*#__PURE__*/_jsxDEV(\"bufferAttribute\", {\n        attachObject: [\"attributes\", \"position\"],\n        count: positions.length / 3,\n        array: positions,\n        itemSize: 3\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 61,\n        columnNumber: 13\n      }, this), /*#__PURE__*/_jsxDEV(\"bufferAttribute\", {\n        ref: attrib,\n        attachObject: [\"attributes\", \"color\"],\n        count: colors.length / 3,\n        array: colors,\n        itemSize: 3\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 62,\n        columnNumber: 13\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 60,\n      columnNumber: 11\n    }, this), /*#__PURE__*/_jsxDEV(\"pointsMaterial\", {\n      attach: \"material\",\n      vertexColors: true,\n      size: parameters.size,\n      sizeAttenuation: true\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 64,\n      columnNumber: 11\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 59,\n    columnNumber: 9\n  }, this);\n}\n\n_s(Galaxy, \"i1dOtssl3wxQKYsHI9opDMxageo=\");\n\n_c = Galaxy;\n\nvar _c;\n\n$RefreshReg$(_c, \"Galaxy\");","map":{"version":3,"sources":["C:/Users/win10/DEV/cosmosapiens/src/components/galaxy/galaxy.js"],"names":["React","useMemo","useRef","useCallback","WormholeMap","CloudsMap","TextureLoader","useLoader","useFrame","OrbitControls","Stars","THREE","parameters","count","size","radius","branches","spin","randomness","randomnessPower","stars","starColor","insideColor","outsideColor","Galaxy","props","positions","colors","i","x","Math","random","branchAngle","PI","spinAngle","randomX","pow","randomY","randomZ","sin","cos","colorInside","Color","colorOutside","mixedColor","clone","lerp","r","g","b","Float32Array","length","attrib"],"mappings":";;;AAAA,OAAOA,KAAP,IAAgBC,OAAhB,EAAyBC,MAAzB,EAAiCC,WAAjC,QAAoD,OAApD;AACA,OAAOC,WAAP,MAAwB,oCAAxB;AACA,OAAOC,SAAP,MAAsB,iCAAtB;AACA,SAASC,aAAT,QAA8B,OAA9B;AACA,SAASC,SAAT,EAAoBC,QAApB,QAAoC,oBAApC;AACA,SAASC,aAAT,EAAwBC,KAAxB,QAAqC,mBAArC;AACA,OAAO,KAAKC,KAAZ,MAAuB,OAAvB;;AAEA,MAAMC,UAAU,GAAG,EAAnB;AAEAA,UAAU,CAACC,KAAX,GAAmB,KAAnB;AACAD,UAAU,CAACE,IAAX,GAAkB,IAAlB;AACAF,UAAU,CAACG,MAAX,GAAoB,CAApB;AACAH,UAAU,CAACI,QAAX,GAAsB,CAAtB;AACAJ,UAAU,CAACK,IAAX,GAAkB,CAAlB;AACAL,UAAU,CAACM,UAAX,GAAwB,GAAxB;AACAN,UAAU,CAACO,eAAX,GAA6B,CAA7B;AACAP,UAAU,CAACQ,KAAX,GAAmB,IAAnB;AACAR,UAAU,CAACS,SAAX,GAAuB,SAAvB;AACAT,UAAU,CAACU,WAAX,GAAyB,SAAzB;AACAV,UAAU,CAACW,YAAX,GAA0B,SAA1B;AAEA,OAAO,SAASC,MAAT,CAAgBC,KAAhB,EAAsB;AAAA;;AAEzB,QAAM,CAACC,SAAD,EAAYC,MAAZ,IAAsB1B,OAAO,CAAC,MAAM;AACtC,QAAIyB,SAAS,GAAG,EAAhB;AAAA,QACEC,MAAM,GAAG,EADX;;AAEA,SAAK,IAAIC,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAGhB,UAAU,CAACC,KAA/B,EAAsCe,CAAC,EAAvC,EAA2C;AACvC;AACJ,YAAMC,CAAC,GAAGC,IAAI,CAACC,MAAL,KAAgBnB,UAAU,CAACG,MAArC;AACA,YAAMiB,WAAW,GAAIJ,CAAC,GAAGhB,UAAU,CAACI,QAAhB,GAA4BJ,UAAU,CAACI,QAAvC,GAAkD,CAAlD,GAAsDc,IAAI,CAACG,EAA/E;AACA,YAAMC,SAAS,GAAGL,CAAC,GAAGjB,UAAU,CAACK,IAAjC;AAEA,YAAMkB,OAAO,GAAGL,IAAI,CAACM,GAAL,CAASN,IAAI,CAACC,MAAL,EAAT,EAAwBnB,UAAU,CAACO,eAAnC,KAAuDW,IAAI,CAACC,MAAL,KAAc,GAAd,GAAoB,CAApB,GAAuB,CAAC,CAA/E,CAAhB;AACA,YAAMM,OAAO,GAAGP,IAAI,CAACM,GAAL,CAASN,IAAI,CAACC,MAAL,EAAT,EAAwBnB,UAAU,CAACO,eAAnC,KAAuDW,IAAI,CAACC,MAAL,KAAc,GAAd,GAAoB,CAApB,GAAuB,CAAC,CAA/E,CAAhB;AACA,YAAMO,OAAO,GAAGR,IAAI,CAACM,GAAL,CAASN,IAAI,CAACC,MAAL,EAAT,EAAwBnB,UAAU,CAACO,eAAnC,KAAuDW,IAAI,CAACC,MAAL,KAAc,GAAd,GAAoB,CAApB,GAAuB,CAAC,CAA/E,CAAhB;AACAL,MAAAA,SAAS,CAACE,CAAC,GAAC,CAAH,CAAT,GAAiBE,IAAI,CAACS,GAAL,CAASP,WAAW,GAAGE,SAAvB,IAAoCL,CAApC,GAAwCM,OAAzD;AACAT,MAAAA,SAAS,CAACE,CAAC,GAAC,CAAF,GAAM,CAAP,CAAT,GAAqBS,OAArB;AACAX,MAAAA,SAAS,CAACE,CAAC,GAAC,CAAF,GAAM,CAAP,CAAT,GAAqBE,IAAI,CAACU,GAAL,CAASR,WAAW,GAAGE,SAAvB,IAAoCL,CAApC,GAAwCS,OAA7D,CAX2C,CAa3C;;AAEA,YAAMG,WAAW,GAAG,IAAI9B,KAAK,CAAC+B,KAAV,CAAgB9B,UAAU,CAACU,WAA3B,CAApB;AACA,YAAMqB,YAAY,GAAG,IAAIhC,KAAK,CAAC+B,KAAV,CAAgB9B,UAAU,CAACW,YAA3B,CAArB;AAGA,YAAMqB,UAAU,GAAGH,WAAW,CAACI,KAAZ,EAAnB;AACAD,MAAAA,UAAU,CAACE,IAAX,CAAgBH,YAAhB,EAA8Bd,CAAC,GAAGjB,UAAU,CAACG,MAA7C;AAEAY,MAAAA,MAAM,CAACC,CAAC,GAAC,CAAF,GAAM,CAAP,CAAN,GAAkBgB,UAAU,CAACG,CAA7B;AACApB,MAAAA,MAAM,CAACC,CAAC,GAAC,CAAF,GAAM,CAAP,CAAN,GAAkBgB,UAAU,CAACI,CAA7B;AACArB,MAAAA,MAAM,CAACC,CAAC,GAAC,CAAF,GAAM,CAAP,CAAN,GAAkBgB,UAAU,CAACK,CAA7B;AAEC;;AACD,WAAO,CAAC,IAAIC,YAAJ,CAAiBxB,SAAjB,CAAD,EAA8B,IAAIwB,YAAJ,CAAiBvB,MAAjB,CAA9B,CAAP;AACD,GA/BgC,EA+B9B,CAACf,UAAU,CAACC,KAAZ,CA/B8B,CAAnC;AAiCA,sBACI;AAAA,4BACE;AAAgB,MAAA,MAAM,EAAC,UAAvB;AAAA,8BACE;AAAiB,QAAA,YAAY,EAAE,CAAC,YAAD,EAAe,UAAf,CAA/B;AAA2D,QAAA,KAAK,EAAEa,SAAS,CAACyB,MAAV,GAAmB,CAArF;AAAwF,QAAA,KAAK,EAAEzB,SAA/F;AAA0G,QAAA,QAAQ,EAAE;AAApH;AAAA;AAAA;AAAA;AAAA,cADF,eAEE;AAAiB,QAAA,GAAG,EAAE0B,MAAtB;AAA8B,QAAA,YAAY,EAAE,CAAC,YAAD,EAAe,OAAf,CAA5C;AAAqE,QAAA,KAAK,EAAEzB,MAAM,CAACwB,MAAP,GAAgB,CAA5F;AAA+F,QAAA,KAAK,EAAExB,MAAtG;AAA8G,QAAA,QAAQ,EAAE;AAAxH;AAAA;AAAA;AAAA;AAAA,cAFF;AAAA;AAAA;AAAA;AAAA;AAAA,YADF,eAKE;AAAgB,MAAA,MAAM,EAAC,UAAvB;AAAkC,MAAA,YAAY,MAA9C;AAA+C,MAAA,IAAI,EAAEf,UAAU,CAACE,IAAhE;AAAsE,MAAA,eAAe,EAAE;AAAvF;AAAA;AAAA;AAAA;AAAA,YALF;AAAA;AAAA;AAAA;AAAA;AAAA,UADJ;AASH;;GA5CeU,M;;KAAAA,M","sourcesContent":["import React, { useMemo, useRef, useCallback } from \"react\"\r\nimport WormholeMap from '../../assets/textures/wormhole.jpg';\r\nimport CloudsMap from '../../assets/textures/cloud.png';\r\nimport { TextureLoader } from \"three\";\r\nimport { useLoader, useFrame } from \"@react-three/fiber\";\r\nimport { OrbitControls, Stars } from '@react-three/drei';\r\nimport * as THREE from \"three\";\r\n\r\nconst parameters = {}\r\n\r\nparameters.count = 70000\r\nparameters.size = 0.01\r\nparameters.radius = 5\r\nparameters.branches = 8\r\nparameters.spin = 1\r\nparameters.randomness = 0.3\r\nparameters.randomnessPower = 5\r\nparameters.stars = 9000\r\nparameters.starColor = '#1b3984'\r\nparameters.insideColor = '#ff6030'\r\nparameters.outsideColor = '#1b3984'\r\n\r\nexport function Galaxy(props){\r\n\r\n    const [positions, colors] = useMemo(() => {\r\n        let positions = [],\r\n          colors = []\r\n        for (let i = 0; i < parameters.count; i++) {\r\n            //Position\r\n        const x = Math.random() * parameters.radius\r\n        const branchAngle = (i % parameters.branches) / parameters.branches * 2 * Math.PI\r\n        const spinAngle = x * parameters.spin\r\n\r\n        const randomX = Math.pow(Math.random(), parameters.randomnessPower) * (Math.random()<0.5 ? 1: -1) \r\n        const randomY = Math.pow(Math.random(), parameters.randomnessPower) * (Math.random()<0.5 ? 1: -1) \r\n        const randomZ = Math.pow(Math.random(), parameters.randomnessPower) * (Math.random()<0.5 ? 1: -1)\r\n        positions[i*3] = Math.sin(branchAngle + spinAngle) * x + randomX\r\n        positions[i*3 + 1] = randomY\r\n        positions[i*3 + 2] = Math.cos(branchAngle + spinAngle) * x + randomZ\r\n        \r\n        //Color\r\n\r\n        const colorInside = new THREE.Color(parameters.insideColor)\r\n        const colorOutside = new THREE.Color(parameters.outsideColor)\r\n\r\n\r\n        const mixedColor = colorInside.clone()\r\n        mixedColor.lerp(colorOutside, x / parameters.radius)\r\n\r\n        colors[i*3 + 0] = mixedColor.r\r\n        colors[i*3 + 1] = mixedColor.g\r\n        colors[i*3 + 2] = mixedColor.b\r\n\r\n        }\r\n        return [new Float32Array(positions), new Float32Array(colors)]\r\n      }, [parameters.count])\r\n\r\n    return (\r\n        <points>\r\n          <bufferGeometry attach=\"geometry\">\r\n            <bufferAttribute attachObject={[\"attributes\", \"position\"]} count={positions.length / 3} array={positions} itemSize={3} />\r\n            <bufferAttribute ref={attrib} attachObject={[\"attributes\", \"color\"]} count={colors.length / 3} array={colors} itemSize={3} />\r\n          </bufferGeometry>\r\n          <pointsMaterial attach=\"material\" vertexColors size={parameters.size} sizeAttenuation={true} />\r\n        </points>\r\n      );\r\n}"]},"metadata":{},"sourceType":"module"}